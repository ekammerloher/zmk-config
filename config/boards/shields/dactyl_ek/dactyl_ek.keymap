/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &send_number 1 &send_number 2 &send_number 3 &send_number 4 &send_number 5 &send_number 6
                &send_number 7 &send_number 8 &send_number 9 &send_number 10 &send_number 11 &send_number 12
                &send_number 13 &send_number 14 &send_number 15 &send_number 16 &send_number 17 &send_number 18
                &send_number 19 &send_number 20 &send_number 21 &send_number 22 &send_number 23 &send_number 24
                &send_number 25 &send_number 26 &send_number 27 &send_number 28 &send_number 29 &send_number 30
                &send_number 31 &send_number 32 &send_number 33 &send_number 34 &send_number 35 &send_number 36
            >;
        };
    };

    code <
#include <zmk/behavior.h>
#include <zmk/keymap.h>
#include <zmk/endpoints.h>
#include <zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

static int send_number_key_press(struct zmk_behavior_binding *binding, struct zmk_behavior_binding_event event) {
    uint8_t number = binding->param1;

    if (number > 0 && number <= 9) {
        zmk_keymap_keycode_pressed(ZC_1 + number - 1);
    } else if (number >= 10 && number <= 36) {
        uint8_t tens = number / 10;
        uint8_t ones = number % 10;
        zmk_keymap_keycode_pressed(ZC_0 + tens);
        zmk_keymap_keycode_released(ZC_0 + tens);
        zmk_keymap_keycode_pressed(ZC_0 + ones);
    }

    return 0;
}

static int send_number_key_release(struct zmk_behavior_binding *binding, struct zmk_behavior_binding_event event) {
    uint8_t number = binding->param1;

    if (number > 0 && number <= 9) {
        zmk_keymap_keycode_released(ZC_1 + number - 1);
    } else if (number >= 10 && number <= 36) {
        uint8_t ones = number % 10;
        zmk_keymap_keycode_released(ZC_0 + ones);
    }

    return 0;
}

ZMK_BEHAVIOR_DEF_VARIABLE_PRESS_RELEASE(send_number, send_number_key_press, send_number_key_release);
    >;
};
